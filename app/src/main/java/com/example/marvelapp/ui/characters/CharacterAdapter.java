package com.example.marvelapp.ui.characters;import android.annotation.SuppressLint;import android.content.Context;import android.util.Log;import android.view.LayoutInflater;import android.view.ViewGroup;import androidx.annotation.NonNull;import androidx.recyclerview.widget.DiffUtil;import androidx.recyclerview.widget.ListAdapter;import androidx.recyclerview.widget.RecyclerView;import com.bumptech.glide.Glide;import com.example.marvelapp.data.model.Character;import com.example.marvelapp.databinding.CharacterItemBinding;import com.example.marvelapp.ui.listeners.OnClickListener;import java.util.ArrayList;import java.util.List;public class CharacterAdapter extends ListAdapter<Character,CharacterAdapter.CharacterViewHolder> {    private final List<Character> characterDataSet = new ArrayList<>();    private final Context context;    private final OnClickListener onItemClickListener;    public CharacterAdapter(Context context,  OnClickListener onItemClickListener, @NonNull DiffUtil.ItemCallback<Character> diffItemCallback){            super(diffItemCallback);            this.context = context;            this.onItemClickListener = onItemClickListener;    }    @NonNull    @Override    public CharacterViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        LayoutInflater inflater = LayoutInflater.from(parent.getContext());        CharacterItemBinding binding = CharacterItemBinding.inflate(inflater,parent,false);        return new CharacterViewHolder(binding);    }    @Override    public void onBindViewHolder(@NonNull CharacterViewHolder holder, int position) {        Character character = characterDataSet.get(position);        holder.itemBinding.characterTxt.setText(character.getName());        String imageURl = character.getThumbnail().getPath() + "." + character.getThumbnail().getExtension();        Glide.with(context).load(imageURl)                .centerCrop()                .into(holder.itemBinding.characterImg);        holder.itemView.setOnClickListener(view -> onItemClickListener.onCharacterClicked(characterDataSet.get(position)));    }    @Override    public int getItemCount() {        if(characterDataSet != null){            return characterDataSet.size();        }        return 0 ;    }     static class CharacterViewHolder extends RecyclerView.ViewHolder {        CharacterItemBinding itemBinding;        public CharacterViewHolder(@NonNull CharacterItemBinding itemBinding) {            super(itemBinding.getRoot());            this.itemBinding = itemBinding;        }    }    public void refreshCharacterList(List<Character> data) {        characterDataSet.addAll(data);        submitList(new ArrayList<>(characterDataSet));    }    public static class CharacterDiff extends DiffUtil.ItemCallback<Character>{        @Override        public boolean areItemsTheSame(@NonNull Character oldItem, @NonNull Character newItem) {            return oldItem.getName().equals(newItem.getName());        }        @SuppressLint("DiffUtilEquals")        @Override        public boolean areContentsTheSame(@NonNull Character oldItem, @NonNull Character newItem) {            return newItem == oldItem;        }    }}