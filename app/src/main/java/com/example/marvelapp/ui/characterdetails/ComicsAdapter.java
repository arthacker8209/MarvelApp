package com.example.marvelapp.ui.characterdetails;import android.annotation.SuppressLint;import android.content.Context;import android.view.LayoutInflater;import android.view.ViewGroup;import androidx.annotation.NonNull;import androidx.recyclerview.widget.DiffUtil;import androidx.recyclerview.widget.ListAdapter;import androidx.recyclerview.widget.RecyclerView;import com.bumptech.glide.Glide;import com.example.marvelapp.data.model.Comics;import com.example.marvelapp.databinding.ComicsItemBinding;import com.example.marvelapp.ui.listeners.OnClickListener;import java.util.ArrayList;import java.util.List;public class ComicsAdapter extends ListAdapter<Comics, ComicsAdapter.ComicsViewHolder> {    private final List<Comics> comicsDataSet = new ArrayList<>();    private final Context context;    public ComicsAdapter(Context context, @NonNull DiffUtil.ItemCallback<Comics> diffItemCallback){        super(diffItemCallback);        this.context = context;    }    @NonNull    @Override    public ComicsViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        LayoutInflater inflater = LayoutInflater.from(parent.getContext());        ComicsItemBinding binding = ComicsItemBinding.inflate(inflater,parent,false);        return new ComicsViewHolder(binding);    }    @Override    public void onBindViewHolder(@NonNull ComicsViewHolder holder, int position) {        Comics comic = comicsDataSet.get(position);        holder.itemBinding.comicTxt.setText(comic.getTitle());        String url = comic.getThumbnail().getPath()+"."+comic.getThumbnail().getExtension();        Glide.with(context).load(url).into(holder.itemBinding.comicsImg);    }    @Override    public int getItemCount() {        if(comicsDataSet != null){            return comicsDataSet.size();        }        return 0 ;    }    static class ComicsViewHolder extends RecyclerView.ViewHolder {        ComicsItemBinding itemBinding;        public ComicsViewHolder(@NonNull ComicsItemBinding itemBinding) {            super(itemBinding.getRoot());            this.itemBinding = itemBinding;        }    }    public void refreshComicsList(List<Comics> data) {;        comicsDataSet.addAll(data);        notifyDataSetChanged();    }    public static class ComicsDiff extends DiffUtil.ItemCallback<Comics>{        @Override        public boolean areItemsTheSame(@NonNull Comics oldItem, @NonNull Comics newItem) {            return oldItem.getTitle().equals(newItem.getTitle());        }        @SuppressLint("DiffUtilEquals")        @Override        public boolean areContentsTheSame(@NonNull Comics oldItem, @NonNull Comics newItem) {            return newItem == oldItem;        }    }}