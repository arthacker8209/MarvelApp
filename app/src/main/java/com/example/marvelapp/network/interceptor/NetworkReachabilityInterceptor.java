package com.example.marvelapp.network.interceptor;import android.content.Context;import android.net.ConnectivityManager;import android.net.Network;import android.net.NetworkCapabilities;import androidx.annotation.NonNull;import java.io.IOException;import javax.inject.Inject;import dagger.hilt.android.qualifiers.ApplicationContext;import okhttp3.Interceptor;import okhttp3.Request;import okhttp3.Response;class NetworkNotAvailableException extends IOException{    public NetworkNotAvailableException() {        super("Internet connection not available");    }}interface NetworkStateChecker{    boolean isNetworkAvailable();}class NetworkStateCheckerImpl implements NetworkStateChecker {    private final Context context;    @Inject    NetworkStateCheckerImpl(@ApplicationContext Context context){        this.context = context;    }    @Override    public boolean isNetworkAvailable() {        ConnectivityManager connectivityManager =                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);        Network network = connectivityManager.getActiveNetwork();        NetworkCapabilities activeNetwork = connectivityManager.getNetworkCapabilities(network);        return activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_WIFI)                || activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR);    }}public class NetworkReachabilityInterceptor implements Interceptor {    NetworkStateChecker networkStateChecker;    public NetworkReachabilityInterceptor(NetworkStateChecker networkStateChecker){        this.networkStateChecker = networkStateChecker;    }    @NonNull    @Override    public Response intercept(@NonNull Chain chain) throws IOException {        if(!networkStateChecker.isNetworkAvailable()){            throw new NetworkNotAvailableException();        }        Request request = chain.request();        chain.proceed(request);        return null;    }}