package com.example.marvelapp.data.repository;import android.util.Log;import com.example.marvelapp.data.db.CharacterDao;import com.example.marvelapp.data.model.Character;import com.example.marvelapp.data.model.CharacterDataWrapper;import com.example.marvelapp.data.model.CharacterPage;import com.example.marvelapp.data.model.ComicDataWrapper;import com.example.marvelapp.data.model.Comics;import com.example.marvelapp.data.network.service.MarvelApiService;import java.util.List;import javax.inject.Inject;import io.reactivex.rxjava3.core.Observable;import io.reactivex.rxjava3.disposables.CompositeDisposable;public class CharacterRepositoryImpl implements CharacterRepository{    private final MarvelApiService marvelApiService;    private final CharacterDao characterDao;    private final CompositeDisposable compositeDisposable = new CompositeDisposable();    @Inject    public CharacterRepositoryImpl(MarvelApiService service, CharacterDao dao){        marvelApiService = service;        characterDao = dao;    }    @Override    public Observable<List<Character>> loadCharacters() {        return loadCharactersFromDB();    }    @Override    public Observable<CharacterDataWrapper> loadCharactersFromApi(CharacterPage page) {        return marvelApiService.loadCharacters(page.getLimit(), page.getOffset()).doOnNext(                result ->{                    characterDao.saveCharacters(result.getData().getResults());                }        );    }    // Here loading comics from api and returning a observable of list    // Not making this offline first due to time bound    @Override    public Observable<List<Comics>> loadComics(Character character) {        return loadComicsFromApi(character).map(                result -> result.getData().getResults()        );    }    //First will search in database before making api request for search    @Override    public Observable<List<Character>> getSearchResultsFromDB(String query) {        return characterDao.getSearchResults(query);    }    private Observable<ComicDataWrapper> loadComicsFromApi(Character characterId){        return marvelApiService.loadComics(characterId.getId());    }    private Observable<List<Character>> loadCharactersFromDB() {        return characterDao.loadCharacters();    }}