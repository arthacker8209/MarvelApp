package com.example.marvelapp.data.network;import androidx.viewbinding.BuildConfig;import com.example.marvelapp.data.network.interceptor.NetworkReachabilityInterceptor;import com.example.marvelapp.data.network.interceptor.NetworkStateChecker;import com.example.marvelapp.data.network.service.MarvelApiService;import java.util.concurrent.TimeUnit;import javax.inject.Singleton;import dagger.Module;import dagger.Provides;import dagger.hilt.InstallIn;import dagger.hilt.components.SingletonComponent;import okhttp3.OkHttpClient;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Retrofit;import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;import retrofit2.adapter.rxjava3.RxJava3CallAdapterFactory;import retrofit2.converter.gson.GsonConverterFactory;@Module@InstallIn({SingletonComponent.class})public class NetworkModule { @Provides @Singleton  OkHttpClient provideOkHttpClient(NetworkStateChecker networkStateChecker){     int timeoutInSeconds =120;     OkHttpClient.Builder builder = new OkHttpClient.Builder()             .connectTimeout(timeoutInSeconds, TimeUnit.SECONDS)             .readTimeout(timeoutInSeconds, TimeUnit.SECONDS)             .addInterceptor( new NetworkReachabilityInterceptor());     if(BuildConfig.DEBUG){      HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();      interceptor.level(HttpLoggingInterceptor.Level.BODY);      builder.addInterceptor(interceptor);     }   return builder.build();  } @Provides @Singleton Retrofit provideRetrofit(OkHttpClient okHttpClient) {  return new Retrofit.Builder()          .baseUrl("https://gateway.marvel.com")          .client(okHttpClient)          .addCallAdapterFactory(RxJava3CallAdapterFactory.create())          .addConverterFactory(GsonConverterFactory.create())          .build(); }    @Provides    @Singleton    MarvelApiService provideMarvelApiService(Retrofit retrofit){        return retrofit.create(MarvelApiService.class);    }}